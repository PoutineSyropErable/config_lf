# interpreter for shell commands
set shell sh
map <enter> shell fish
#Need EZA ! For on select to properly show file info

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# Use the `dim` attribute instead of underline for the cursor in the preview pane
set cursorpreviewfmt "\033[7;2m"

# Ratios and Info display
set ratios 1:2:3
# set info size:perm:time

# Previewer and Cleaner settings
set previewer ctpv
set cleaner ctpvclear
&ctpv -s $id
&ctpvquit $id


# Basic Settings
set hidden true
set ignorecase true
set icons true

cmd quit-and-cd &{{
    pwd > "$LF_CD_FILE"
    lf -remote "send $id quit"
}}

cmd clear_general &{{
	lf -remote "send $id clear"
	lf -remote "send $id unselect"
}}

map q quit-and-cd
map Q quit
map <esc> quit
map V unselect
map B clear
map C clear_general

map h !/home/francois/.config/lf/empty.sh > /dev/null &
map w !/home/francois/.config/lf/empty.sh > /dev/null &
# This is in case the image preview cleaner doesn't work, executing a script goes to "press any key to continue", so just double tap h

map I !file "$f"



cmd play_video ${{ 
    nohup "$HOME/Videos/i3-video-wallpaper-main/play_video" "\"$f\"" &
}}


cmd paste_clipboard ${{
	fish -c "echo -n \"$f\" | c"
}}



cmd create_shortcut ${{
	printf "link name: "
	read ans
	ln -s "$f" "$ans"
}}


cmd create_relative_shortcut ${{
	printf "Link name: "
	read ans
	ln -s "$(realpath --relative-to="$PWD" "$f")" "$PWD/$ans"
}}



cmd setwallpaper ${{
	feh  --bg-center --bg-fill --no-fehbg "$f"
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.rar) unrar x "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.xz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.7z) 7z e "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}


cmd open &{{
    # Determine the MIME type of the file
    mime_type=$(file --mime-type -Lb "$f")

    # Check if the file is a text file
	# notify-send "It's in mime_type: ($f) in ($mime_type)"
    case "$mime_type" in
        text/* | inode/x-empty)
            # Send the file to nvim using lf-remote if it is a text file
			# notify-send -t 2000 "lf remote opening with nvim"
            lf -remote "send $id \$nvim \"\$fx\""
            ;;
        *)
            # Use xdg-open for non-text files
			# notify-send "xdg opening"
            xdg-open "$f"
            ;;
    esac
}}

cmd open3 &{{
	case $(file --mime-type -Lb $f) in
		text/*) lf -remote "send $id \$nvim \$fx";;
		*) xdg-open "$f"
	esac
}}


cmd search_for %{{
    lf -remote "send $id push /$1<enter>"
}}

# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir "$ans"
}}

# Custom Functions
cmd mkfile ${{
  printf "File Name: "
  read ans
  touch "$ans"
  # lf -remote "send $id open \$ans"
  # xdg-open "$ans"
  lf -remote "send $id search_for \"$ans\""
  # lf -remote "send $id select \"\$ans\""
  # $EDITOR "$ans"
}}


cmd on-select &{{
    lf -remote "send $id set statfmt \"$(eza -ld --color=always "$f")\""
}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location')"
    if [ -n "$res" ]; then
        if [ -d "$res" ]; then
            cmd="cd"
        else
            cmd="select"
        fi
        res="$(printf '%s' "$res" | sed 's/\\/\\\\/g;s/"/\\"/g')"
        lf -remote "send $id $cmd \"$res\""
    fi
}}
map <c-f> :fzf_jump

cmd fzf_search ${{
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case "
    res="$(
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1 | sed 's/\\/\\\\/g;s/"/\\"/g'
    )"
    [ -n "$res" ] && lf -remote "send $id select \"$res\""
}}
map <c-g> :fzf_search

cmd z-jump ${{
  ZLUA_SCRIPT="$ZDOTDIR/plugins/z.lua/z.lua"
  lf -remote "send ${id} cd \"$($ZLUA_SCRIPT -e $@ | sed 's/\\/\\\\/g;s/"/\\"/g')\""
}}


# Define a custom command 'execute-selected' to execute the selected file
cmd execute-selected ${{ 
    if [ -z "$f" ]; then
        echo "No file selected" >&2
        exit 1
    fi

    # Check if the file is executable
    if [ ! -x "$f" ]; then
        echo "File '$f' is not executable" >&2
        exit 1
    fi
	
	#proccess e key bullshit
	sleep 0.2
    # Execute the selected file
    "$f" &
}}


cmd toggle_exec1 ${{
    if [ -x "$f" ]; then
        chmod -x "$f"
        echo "Removed executable permission from $f"
    else
        chmod +x "$f"
        echo "Added executable permission to $f"
    fi
}}


cmd toggle_exec ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    if [ -x "$file" ]; then
      chmod -x "$file"
      echo "Removed executable permission from $(basename "$file")"
    else
      chmod +x "$file"
      echo "Added executable permission to $(basename "$file")"
    fi
    
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd edit_config ${{ nvim ~/.lfrc  }}


cmd change_permissions1 ${{
  # Prompt the user for permissions
  echo -n "Enter permissions (e.g., 644 or rwxr-xr-x): "
  read permissions

  # Apply the permissions to the selected file(s)
  files=$(printf "$fx" | tr '\n' ' ')
  for file in $files; do
    if [ -e "\"$file\"" ]; then
      chmod "$permissions" "\"$file\""
      echo "Permissions set to $permissions for $(basename "\"$file\"")"
    else
      echo "File not found: $(basename "\"$file\"")"
    fi
  done
}}



cmd change_permissions ${{
  # Prompt the user for permissions
  echo -n "Enter permissions (e.g., 644 or rwxr-xr-x): "
  read permissions

  # Apply the permissions to the selected file(s)
  while IFS= read -r file; do
    if [ -e "$file" ]; then
      chmod "$permissions" "$file"
      echo "Permissions set to $permissions for $(basename "$file")"
    else
      echo "File not found: $(basename "$file")"
    fi
  done <<< "$fx"
}}




cmd open_in_nvim ${{
    session_name="$1"
    script_file="$HOME/.config/zsh/pythonHelperScript/open_remote_nvim.py"

    # Prepare the files
    files=$(printf "$fx" | tr '\n' ' ')

    # If session_name is empty, don't pass --name argument
    if [ -z "$session_name" ]; then
        # Run the script without the --name argument
        "$script_file" $files
    else
        # Run the script with the --name argument
        "$script_file" --name="$session_name" $files
    fi
}}

cmd send_to_nvim ${{
    script_file="$HOME/.config/zsh/pythonHelperScript/send_to_nvim.py"
    session_name="$1"
    files=$(printf "$fx" | tr '\n' ' ')  # Transform the file list into a space-separated string

    # If session_name is empty, don't pass --name argument
    if [ -z "$session_name" ]; then
        # Run the script without the --name argument
        "$script_file" $files
    else
        # Run the script with the --name argument
        "$script_file" --name="$session_name" $files
    fi
}}



map Z push :z-jump<space>-I<space>
map zb push :z-jump<space>-b<space>
map zz push :z-jump<space>

# Bindings
map c
map d
map m

#map co $vscodium "$f"
#map cf $dotbare fadd -f

map au unarchive
map ae $wine "$f"


# Map 'j' to move down (originally 'j')
map j updir

# Map 'k' to move left/up a directory (originally 'h')
map k down

# Map 'i' to move up (originally 'k')
map i up

# Map 'l' to move right/enter a directory (originally 'l')
map l open
map <right> open



# Basic Functions
map . set hidden!
map dd trash
map u $trash restore -r 0
map dr $trash restore
map de $trash empty --all
map p paste
map x cut
map y copy
# map <enter> open
map R reload
map mf mkfile
map md mkdir
map bg setwallpaper





map sl create_shortcut
map sr create_relative_shortcut
map sp sudo paste

# Movement
map ch cd ~

map cD cd ~/Documents
map cd cd ~/Downloads
map cp cd ~/Pictures
map cm cd ~/Music
map cv cd ~/Videos
map cs cd ~/.local/bin
map ct cd ~/.local/share/Trash/files
map cj cd /home/francois/MainPython_Virtual_Environment/projects/polyfem2d


map cc cd ~/.config
map ce cd ~/.config/eww
map ck cd ~/.config/kanata
map cH cd ~/.config/hypr
map cl cd ~/.config/lf
map cn cd ~/.config/nvim
map cP cd ~/.config/polybar.old
map cr cd ~/.config/rofi/applets/bin
map cw cd ~/.config/waybar


cmd open_dir_nvim  ${{ 
    nvim .
}}
map eb !firefox "$f" &
map ef !thunar "$f" &
map cf !thunar "$f" &
map ev open_dir_nvim



# Bind the custom command to the 'e' key
map e
map ec edit_config
map ee execute-selected
map er play_video
map ey paste_clipboard

map eo toggle_exec1
map eO toggle_exec

map ep change_permissions

map on !nvim "$f"
map oN !nvim "."

# Keybinding for `rvd` - open files in Neovim with the default session (no session passed)
map od open_in_nvim "" 
# session name = 1, 2 or 3
map o1 open_in_nvim "1"
map o2 open_in_nvim "2"
map o3 open_in_nvim "3"


# Keybinding for `svd` - send files to Neovim with the default session (no session passed)
map sd send_to_nvim ""
map s1 send_to_nvim "1"
map s2 send_to_nvim "2"
map s3 send_to_nvim "3"
map osd send_to_nvim ""
map os1 send_to_nvim "1"
map os2 send_to_nvim "2"
map os3 send_to_nvim "3"



map oc !codium "$f"
map oc !codium "."
map ow !dbus-send --session --dest=org.xfce.Thunar --type=method_call --print-reply --reply-timeout=5000 /org/xfce/FileManager org.xfce.FileManager.Open --string "$f" --string "other"
map om !mpv "$f"

map oip !pinta "$f"


map of !thunar "$f" &
map mp !mpc_playsong.sh "$f"
